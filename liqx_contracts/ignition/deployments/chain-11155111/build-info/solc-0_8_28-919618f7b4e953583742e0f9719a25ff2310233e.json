{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-919618f7b4e953583742e0f9719a25ff2310233e",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/LiquidityGuardVault.sol": "project/contracts/LiquidityGuardVault.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/AccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/access/IAccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity >=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/ERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/LiquidityGuardVault.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n// ============================================\n// INTERFACES (Minimal ABIs)\n// ============================================\n\ninterface IAavePool {\n    function supply(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    function getUserAccountData(\n        address user\n    )\n        external\n        view\n        returns (\n            uint256 totalCollateralBase,\n            uint256 totalDebtBase,\n            uint256 availableBorrowsBase,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        );\n}\n\ninterface ILido {\n    function submit(address referral) external payable returns (uint256);\n}\n\ninterface IWstETH {\n    function wrap(uint256 stETHAmount) external returns (uint256);\n\n    function unwrap(uint256 wstETHAmount) external returns (uint256);\n}\n\ninterface IComptroller {\n    function enterMarkets(\n        address[] calldata cTokens\n    ) external returns (uint256[] memory);\n\n    function getAccountLiquidity(\n        address account\n    ) external view returns (uint256, uint256, uint256);\n}\n\ninterface ICToken {\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function underlying() external view returns (address);\n}\n\ninterface IAggregationRouterV5 {\n    struct SwapDescription {\n        address srcToken;\n        address dstToken;\n        address payable srcReceiver;\n        address payable dstReceiver;\n        uint256 amount;\n        uint256 minReturnAmount;\n        uint256 flags;\n    }\n\n    function swap(\n        address executor,\n        SwapDescription calldata desc,\n        bytes calldata permit,\n        bytes calldata data\n    ) external payable returns (uint256 returnAmount, uint256 spentAmount);\n}\n\ninterface ISwapRouter {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    function exactInputSingle(\n        ExactInputSingleParams calldata params\n    ) external payable returns (uint256 amountOut);\n}\n\ninterface IUniswapV2Router {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n}\n\n/**\n * @title LiquidityGuardVault\n * @notice AI-Powered DeFi Liquidation Protection Vault for LiqX\n * @dev Optimized single contract with inline Aave V3, Lido, Compound, 1inch, Uniswap integrations\n * @author LiqX Team\n */\ncontract LiquidityGuardVault is AccessControl, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // ============================================\n    // STATE VARIABLES\n    // ============================================\n\n    bytes32 public constant USER_ROLE = keccak256(\"USER_ROLE\");\n    bytes32 public constant AGENT_ROLE = keccak256(\"AGENT_ROLE\"); // Protocol addresses (immutable for gas optimization)\n    address public immutable AAVE_POOL;\n    address public immutable LIDO;\n    address public immutable WSTETH;\n    address public immutable COMPOUND_COMPTROLLER;\n    address public immutable ONEINCH_ROUTER;\n    address public immutable UNISWAP_V3_ROUTER;\n    address public immutable UNISWAP_V2_ROUTER;\n    address public immutable USDC; // Emergency liquidation target\n\n    // Limits (18 decimals for HF, ether units for amounts)\n    uint256 public constant MIN_HEALTH_FACTOR = 1.1e18;\n    uint256 public constant MAX_POSITION_SIZE = 1000 ether;\n    uint256 public constant MAX_TX_SIZE = 100_000 ether; // ~$100K equivalent\n    uint256 public constant EXECUTION_COOLDOWN = 1 hours;\n    uint256 public constant DAILY_EXECUTION_LIMIT = 10;\n    uint256 public constant MAX_SLIPPAGE = 50; // 0.5% (basis points)\n\n    // User & Agent tracking\n    mapping(address => mapping(address => uint256)) public userDeposits; // user => asset => amount\n    mapping(address => uint256) public agentLastExecution;\n    mapping(address => uint256) public agentDailyExecutions;\n    mapping(address => uint256) public agentDailyResetTime;\n    mapping(address => bool) public userPaused;\n\n    bool public circuitBreakerActive;\n\n    // ============================================\n    // EVENTS\n    // ============================================\n\n    event Deposit(\n        address indexed user,\n        address indexed asset,\n        uint256 amount,\n        uint256 timestamp\n    );\n    event Withdrawal(\n        address indexed user,\n        address indexed asset,\n        uint256 amount,\n        uint256 timestamp\n    );\n    event RebalanceExecuted(\n        address indexed agent,\n        address indexed user,\n        string action,\n        uint256 gasUsed\n    );\n    event HealthCheck(address indexed user, uint256 healthFactor);\n    event EmergencyLiquidation(address indexed user, uint256 amountOut);\n    event CircuitBreakerToggled(bool active);\n\n    // ============================================\n    // ERRORS\n    // ============================================\n\n    error Unauthorized();\n    error InsufficientBalance();\n    error HealthFactorTooLow(uint256 current, uint256 required);\n    error ExceedsLimit();\n    error CooldownActive();\n    error CircuitBreakerTriggered();\n    error UserPaused();\n    error ZeroAmount();\n\n    // ============================================\n    // MODIFIERS\n    // ============================================\n\n    modifier onlyAgent() {\n        if (!hasRole(AGENT_ROLE, msg.sender)) revert Unauthorized();\n\n        // Check cooldown\n        if (\n            block.timestamp <\n            agentLastExecution[msg.sender] + EXECUTION_COOLDOWN\n        ) revert CooldownActive();\n\n        // Check daily limit (reset if new day)\n        if (block.timestamp >= agentDailyResetTime[msg.sender] + 1 days) {\n            agentDailyExecutions[msg.sender] = 0;\n            agentDailyResetTime[msg.sender] = block.timestamp;\n        }\n        if (agentDailyExecutions[msg.sender] >= DAILY_EXECUTION_LIMIT)\n            revert ExceedsLimit();\n\n        agentLastExecution[msg.sender] = block.timestamp;\n        agentDailyExecutions[msg.sender]++;\n        _;\n    }\n\n    modifier whenNotPaused(address user) {\n        if (userPaused[user]) revert UserPaused();\n        if (circuitBreakerActive) revert CircuitBreakerTriggered();\n        _;\n    }\n\n    // ============================================\n    // CONSTRUCTOR\n    // ============================================\n\n    constructor(\n        address _aavePool,\n        address _lido,\n        address _wstETH,\n        address _comptroller,\n        address _oneInch,\n        address _uniV3,\n        address _uniV2,\n        address _usdc\n    ) {\n        AAVE_POOL = _aavePool;\n        LIDO = _lido;\n        WSTETH = _wstETH;\n        COMPOUND_COMPTROLLER = _comptroller;\n        ONEINCH_ROUTER = _oneInch;\n        UNISWAP_V3_ROUTER = _uniV3;\n        UNISWAP_V2_ROUTER = _uniV2;\n        USDC = _usdc;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    // ============================================\n    // USER FUNCTIONS\n    // ============================================\n\n    /// @notice Deposit ERC20 assets to vault\n    function deposit(address asset, uint256 amount) external nonReentrant {\n        if (amount == 0) revert ZeroAmount();\n        if (amount > MAX_POSITION_SIZE) revert ExceedsLimit();\n\n        IERC20(asset).safeTransferFrom(msg.sender, address(this), amount);\n        userDeposits[msg.sender][asset] += amount;\n\n        if (!hasRole(USER_ROLE, msg.sender)) {\n            _grantRole(USER_ROLE, msg.sender);\n        }\n\n        emit Deposit(msg.sender, asset, amount, block.timestamp);\n    }\n\n    /// @notice Withdraw assets (checks health factor post-withdrawal)\n    function withdraw(\n        address asset,\n        uint256 amount\n    ) external nonReentrant whenNotPaused(msg.sender) {\n        if (amount == 0) revert ZeroAmount();\n        if (userDeposits[msg.sender][asset] < amount)\n            revert InsufficientBalance();\n\n        userDeposits[msg.sender][asset] -= amount;\n        IERC20(asset).safeTransfer(msg.sender, amount);\n\n        // Post-check: Ensure health factor remains safe\n        uint256 hf = checkHealthFactor(msg.sender);\n        if (hf < MIN_HEALTH_FACTOR && hf != type(uint256).max) {\n            revert HealthFactorTooLow(hf, MIN_HEALTH_FACTOR);\n        }\n\n        emit Withdrawal(msg.sender, asset, amount, block.timestamp);\n    }\n\n    /// @notice User pauses their own vault (prevents agent actions)\n    function pauseVault() external {\n        userPaused[msg.sender] = true;\n    }\n\n    /// @notice User unpauses their vault\n    function unpauseVault() external {\n        userPaused[msg.sender] = false;\n    }\n\n    // ============================================\n    // AGENT FUNCTIONS\n    // ============================================\n\n    /// @notice Execute atomic rebalance: withdraw → swap → deposit\n    /// @param user Target user\n    /// @param strategyData Encoded: (uint8 action, address[] tokens, uint256[] amounts, bytes swapData)\n    ///   action: 0=AaveToLido, 1=LidoToCompound, 2=CompoundToAave, etc.\n    function executeRebalance(\n        address user,\n        bytes calldata strategyData\n    ) external onlyAgent nonReentrant whenNotPaused(user) {\n        uint256 gasStart = gasleft();\n\n        (\n            uint8 action,\n            address[] memory tokens,\n            uint256[] memory amounts,\n            bytes memory swapData\n        ) = abi.decode(strategyData, (uint8, address[], uint256[], bytes));\n\n        if (amounts[0] > MAX_TX_SIZE) revert ExceedsLimit();\n\n        // Pre-check health factor\n        uint256 hfBefore = checkHealthFactor(user);\n        if (hfBefore < MIN_HEALTH_FACTOR && hfBefore != type(uint256).max) {\n            revert HealthFactorTooLow(hfBefore, MIN_HEALTH_FACTOR);\n        }\n\n        // Execute based on action\n        if (action == 0) {\n            // Aave → Lido: withdraw from Aave, swap to ETH, stake to Lido\n            _withdrawFromAave(tokens[0], amounts[0]);\n            uint256 ethOut = _swap1inch(\n                tokens[0],\n                address(0),\n                amounts[0],\n                swapData\n            ); // ETH out\n            _stakeToLido(ethOut);\n        } else if (action == 1) {\n            // Lido → Compound: unwrap wstETH, swap to token, deposit to Compound\n            uint256 stETH = IWstETH(WSTETH).unwrap(amounts[0]);\n            uint256 tokenOut = _swapUniswapV3(\n                WSTETH,\n                tokens[1],\n                stETH,\n                amounts[1]\n            );\n            _depositToCompound(tokens[1], tokenOut);\n        } else if (action == 2) {\n            // Compound → Aave: redeem from Compound, swap, deposit to Aave\n            _withdrawFromCompound(tokens[0], amounts[0]);\n            uint256 tokenOut = _swap1inch(\n                tokens[0],\n                tokens[1],\n                amounts[0],\n                swapData\n            );\n            _depositToAave(tokens[1], tokenOut);\n        }\n        // Add more actions as needed\n\n        // Post-check health factor\n        uint256 hfAfter = checkHealthFactor(user);\n        if (hfAfter < MIN_HEALTH_FACTOR && hfAfter != type(uint256).max) {\n            revert HealthFactorTooLow(hfAfter, MIN_HEALTH_FACTOR);\n        }\n\n        emit RebalanceExecuted(\n            msg.sender,\n            user,\n            _actionToString(action),\n            gasStart - gasleft()\n        );\n    }\n\n    /// @notice Emergency liquidation if HF < 1.0: swap all to USDC\n    function emergencyLiquidate(\n        address user,\n        address[] calldata assets\n    ) external onlyAgent nonReentrant {\n        uint256 hf = checkHealthFactor(user);\n        if (hf >= 1e18 && hf != type(uint256).max)\n            revert HealthFactorTooLow(hf, 1e18);\n\n        uint256 totalUSDC;\n        for (uint256 i = 0; i < assets.length; i++) {\n            uint256 balance = userDeposits[user][assets[i]];\n            if (balance > 0) {\n                userDeposits[user][assets[i]] = 0;\n                uint256 usdcOut = _swapUniswapV2(assets[i], USDC, balance);\n                totalUSDC += usdcOut;\n            }\n        }\n\n        userDeposits[user][USDC] = totalUSDC;\n        emit EmergencyLiquidation(user, totalUSDC);\n    }\n\n    // ============================================\n    // PROTOCOL INTEGRATIONS (Inline)\n    // ============================================\n\n    function _depositToAave(address asset, uint256 amount) internal {\n        IERC20(asset).forceApprove(AAVE_POOL, amount);\n        IAavePool(AAVE_POOL).supply(asset, amount, address(this), 0);\n    }\n\n    function _withdrawFromAave(address asset, uint256 amount) internal {\n        IAavePool(AAVE_POOL).withdraw(asset, amount, address(this));\n    }\n\n    function _stakeToLido(uint256 amount) internal {\n        ILido(LIDO).submit{value: amount}(address(0));\n        // Wrap stETH to wstETH for storage\n        uint256 stETH = IERC20(LIDO).balanceOf(address(this));\n        IERC20(LIDO).forceApprove(WSTETH, stETH);\n        IWstETH(WSTETH).wrap(stETH);\n    }\n\n    function _depositToCompound(address asset, uint256 amount) internal {\n        address cToken = _getCToken(asset); // Assume mapping or registry\n        IERC20(asset).forceApprove(cToken, amount);\n        require(ICToken(cToken).mint(amount) == 0, \"Compound mint failed\");\n    }\n\n    function _withdrawFromCompound(address asset, uint256 amount) internal {\n        address cToken = _getCToken(asset);\n        require(\n            ICToken(cToken).redeemUnderlying(amount) == 0,\n            \"Compound redeem failed\"\n        );\n    }\n\n    function _getCToken(address) internal pure returns (address) {\n        // Mock: Return hardcoded cToken addresses or use a registry\n        return address(0); // Placeholder\n    }\n\n    // ============================================\n    // SWAP INTEGRATIONS\n    // ============================================\n\n    function _swap1inch(\n        address srcToken,\n        address dstToken,\n        uint256 amount,\n        bytes memory swapData\n    ) internal returns (uint256) {\n        IERC20(srcToken).forceApprove(ONEINCH_ROUTER, amount);\n\n        IAggregationRouterV5.SwapDescription memory desc = IAggregationRouterV5\n            .SwapDescription({\n                srcToken: srcToken,\n                dstToken: dstToken,\n                srcReceiver: payable(address(this)),\n                dstReceiver: payable(address(this)),\n                amount: amount,\n                minReturnAmount: (amount * (10000 - MAX_SLIPPAGE)) / 10000, // 0.5% slippage\n                flags: 0\n            });\n\n        (uint256 returnAmount, ) = IAggregationRouterV5(ONEINCH_ROUTER).swap(\n            address(0),\n            desc,\n            \"\",\n            swapData\n        );\n        return returnAmount;\n    }\n\n    function _swapUniswapV3(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        uint256 amountOutMin\n    ) internal returns (uint256) {\n        IERC20(tokenIn).forceApprove(UNISWAP_V3_ROUTER, amountIn);\n\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\n            .ExactInputSingleParams({\n                tokenIn: tokenIn,\n                tokenOut: tokenOut,\n                fee: 3000, // 0.3%\n                recipient: address(this),\n                deadline: block.timestamp + 300,\n                amountIn: amountIn,\n                amountOutMinimum: amountOutMin,\n                sqrtPriceLimitX96: 0\n            });\n\n        return ISwapRouter(UNISWAP_V3_ROUTER).exactInputSingle(params);\n    }\n\n    function _swapUniswapV2(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn\n    ) internal returns (uint256) {\n        IERC20(tokenIn).forceApprove(UNISWAP_V2_ROUTER, amountIn);\n\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n\n        uint256[] memory amounts = IUniswapV2Router(UNISWAP_V2_ROUTER)\n            .swapExactTokensForTokens(\n                amountIn,\n                (amountIn * (10000 - MAX_SLIPPAGE)) / 10000,\n                path,\n                address(this),\n                block.timestamp + 300\n            );\n\n        return amounts[amounts.length - 1];\n    }\n\n    // ============================================\n    // SAFETY & VIEW FUNCTIONS\n    // ============================================\n\n    /// @notice Check health factor across Aave & Compound\n    function checkHealthFactor(address user) public view returns (uint256) {\n        // Check Aave HF\n        try IAavePool(AAVE_POOL).getUserAccountData(user) returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256 hf\n        ) {\n            if (hf > 0 && hf < type(uint256).max) return hf;\n        } catch {}\n\n        // Check Compound liquidity (simplified)\n        try\n            IComptroller(COMPOUND_COMPTROLLER).getAccountLiquidity(user)\n        returns (uint256, uint256 liquidity, uint256 shortfall) {\n            if (shortfall > 0) return 0; // Critical\n            if (liquidity > 0) return type(uint256).max; // Safe\n        } catch {}\n\n        return type(uint256).max; // No position = safe\n    }\n\n    /// @notice Get user's total balance for an asset\n    function getUserBalance(\n        address user,\n        address asset\n    ) external view returns (uint256) {\n        return userDeposits[user][asset];\n    }\n\n    // ============================================\n    // ADMIN FUNCTIONS\n    // ============================================\n\n    function grantAgentRole(\n        address agent\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _grantRole(AGENT_ROLE, agent);\n    }\n\n    function revokeAgentRole(\n        address agent\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _revokeRole(AGENT_ROLE, agent);\n    }\n\n    function toggleCircuitBreaker() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        circuitBreakerActive = !circuitBreakerActive;\n        emit CircuitBreakerToggled(circuitBreakerActive);\n    }\n\n    function recoverTokens(\n        address token,\n        uint256 amount\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        IERC20(token).safeTransfer(msg.sender, amount);\n    }\n\n    // ============================================\n    // HELPERS\n    // ============================================\n\n    function _actionToString(\n        uint8 action\n    ) internal pure returns (string memory) {\n        if (action == 0) return \"AaveToLido\";\n        if (action == 1) return \"LidoToCompound\";\n        if (action == 2) return \"CompoundToAave\";\n        return \"Unknown\";\n    }\n\n    receive() external payable {}\n}\n"
      }
    }
  }
}